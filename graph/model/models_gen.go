// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type LongestRush struct {
	Value       int  `json:"value"`
	IsTouchdown bool `json:"isTouchdown"`
}

type Page struct {
	Offset int `json:"offset"`
	Limit  int `json:"limit"`
}

type PlayersArgs struct {
	Name  *string           `json:"name"`
	Order *PlayersArgsOrder `json:"order"`
	Page  *Page             `json:"page"`
}

type PlayersArgsOrder struct {
	OrderBy PlayersArgsOrderBy `json:"orderBy"`
	Order   Order              `json:"order"`
}

type PlayersResponse struct {
	Players []*Player `json:"players"`
	Total   int       `json:"total"`
	Offset  int       `json:"offset"`
	Limit   int       `json:"limit"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlayersArgsOrderBy string

const (
	PlayersArgsOrderByCreatedAt              PlayersArgsOrderBy = "CREATED_AT"
	PlayersArgsOrderByLongestRush            PlayersArgsOrderBy = "LONGEST_RUSH"
	PlayersArgsOrderByTotalRushingTouchdowns PlayersArgsOrderBy = "TOTAL_RUSHING_TOUCHDOWNS"
	PlayersArgsOrderByTotalRushingYards      PlayersArgsOrderBy = "TOTAL_RUSHING_YARDS"
)

var AllPlayersArgsOrderBy = []PlayersArgsOrderBy{
	PlayersArgsOrderByCreatedAt,
	PlayersArgsOrderByLongestRush,
	PlayersArgsOrderByTotalRushingTouchdowns,
	PlayersArgsOrderByTotalRushingYards,
}

func (e PlayersArgsOrderBy) IsValid() bool {
	switch e {
	case PlayersArgsOrderByCreatedAt, PlayersArgsOrderByLongestRush, PlayersArgsOrderByTotalRushingTouchdowns, PlayersArgsOrderByTotalRushingYards:
		return true
	}
	return false
}

func (e PlayersArgsOrderBy) String() string {
	return string(e)
}

func (e *PlayersArgsOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlayersArgsOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlayersArgsOrderBy", str)
	}
	return nil
}

func (e PlayersArgsOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Position string

const (
	PositionQb  Position = "QB"
	PositionRb  Position = "RB"
	PositionFb  Position = "FB"
	PositionWr  Position = "WR"
	PositionTe  Position = "TE"
	PositionOl  Position = "OL"
	PositionC   Position = "C"
	PositionG   Position = "G"
	PositionLg  Position = "LG"
	PositionRg  Position = "RG"
	PositionT   Position = "T"
	PositionLt  Position = "LT"
	PositionRt  Position = "RT"
	PositionK   Position = "K"
	PositionKr  Position = "KR"
	PositionDl  Position = "DL"
	PositionDe  Position = "DE"
	PositionDt  Position = "DT"
	PositionNt  Position = "NT"
	PositionLb  Position = "LB"
	PositionIlb Position = "ILB"
	PositionOlb Position = "OLB"
	PositionMlb Position = "MLB"
	PositionDb  Position = "DB"
	PositionCb  Position = "CB"
	PositionFs  Position = "FS"
	PositionSs  Position = "SS"
	PositionS   Position = "S"
	PositionP   Position = "P"
	PositionPr  Position = "PR"
)

var AllPosition = []Position{
	PositionQb,
	PositionRb,
	PositionFb,
	PositionWr,
	PositionTe,
	PositionOl,
	PositionC,
	PositionG,
	PositionLg,
	PositionRg,
	PositionT,
	PositionLt,
	PositionRt,
	PositionK,
	PositionKr,
	PositionDl,
	PositionDe,
	PositionDt,
	PositionNt,
	PositionLb,
	PositionIlb,
	PositionOlb,
	PositionMlb,
	PositionDb,
	PositionCb,
	PositionFs,
	PositionSs,
	PositionS,
	PositionP,
	PositionPr,
}

func (e Position) IsValid() bool {
	switch e {
	case PositionQb, PositionRb, PositionFb, PositionWr, PositionTe, PositionOl, PositionC, PositionG, PositionLg, PositionRg, PositionT, PositionLt, PositionRt, PositionK, PositionKr, PositionDl, PositionDe, PositionDt, PositionNt, PositionLb, PositionIlb, PositionOlb, PositionMlb, PositionDb, PositionCb, PositionFs, PositionSs, PositionS, PositionP, PositionPr:
		return true
	}
	return false
}

func (e Position) String() string {
	return string(e)
}

func (e *Position) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Position(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Position", str)
	}
	return nil
}

func (e Position) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
